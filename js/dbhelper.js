class DBHelper{static openDatabase(){var a=idb.open('restaurants-db',1,function(b){b.objectStoreNames.contains('restaurants')||(console.log('Create IndexedDB store'),b.createObjectStore('restaurants',{keyPath:'id'}))});return a}static dbStore(a,b){b.then(function(c){var d=c.transaction('restaurants','readwrite'),e=d.objectStore('restaurants');return e.add(a),d.complete}).then(function(){})}static dbUpdate(a,b){b.then(function(c){var d=c.transaction('restaurants','readwrite'),e=d.objectStore('restaurants');return e.put(a),d.complete}).then(function(){})}static dbGetAll(a,b){a.then(function(c){var d=c.transaction('restaurants','readonly'),e=d.objectStore('restaurants');return e.getAll()}).then(function(c){b(c)})}static get DATABASE_URL(){return`http://localhost:${1337}/restaurants`}static fetchRestaurants(a){let b=DBHelper.openDatabase();b.then(function(c){let d=c.transaction('restaurants','readonly'),e=d.objectStore('restaurants');return e.getAll()}).then(function(c){if(0==c.length)console.log('restaurants are empty'),fetch(DBHelper.DATABASE_URL,{method:'get'}).then(function(d){return d.json()}).then(function(d){d.forEach(function(e){DBHelper.dbStore(e,b)}),a(null,d)}).catch(function(d){const e=`Request failed. Returned status of ${d}`;a(e,null)});else{DBHelper.dbGetAll(b,e=>{a(null,e)})}})}static fetchRestaurantById(a,b){DBHelper.fetchRestaurants((c,d)=>{if(c)b(c,null);else{const e=d.find(f=>f.id==a);e?b(null,e):b('Restaurant does not exist',null)}})}static fetchRestaurantByCuisine(a,b){DBHelper.fetchRestaurants((c,d)=>{if(c)b(c,null);else{const e=d.filter(f=>f.cuisine_type==a);b(null,e)}})}static fetchRestaurantByNeighborhood(a,b){DBHelper.fetchRestaurants((c,d)=>{if(c)b(c,null);else{const e=d.filter(f=>f.neighborhood==a);b(null,e)}})}static fetchRestaurantByCuisineAndNeighborhood(a,b,c,d){DBHelper.fetchRestaurants((e,f)=>{if(e)d(e,null);else{let g=f;'all'!=a&&(g=g.filter(h=>h.cuisine_type==a)),'all'!=b&&(g=g.filter(h=>h.neighborhood==b)),!1!=c&&(g=g.filter(h=>!0==h.is_favorite||'true'==h.is_favorite)),d(null,g)}})}static fetchRestaurantByFavourite(a){DBHelper.fetchRestaurants((b,c)=>{if(b)a(b,null);else{let d=c;d=d.filter(e=>!0==e.is_favorite),a(null,d)}})}static fetchNeighborhoods(a){DBHelper.fetchRestaurants((b,c)=>{if(b)a(b,null);else{const d=c.map((f,g)=>c[g].neighborhood),e=d.filter((f,g)=>d.indexOf(f)==g);a(null,e)}})}static fetchCuisines(a){DBHelper.fetchRestaurants((b,c)=>{if(b)a(b,null);else{const d=c.map((f,g)=>c[g].cuisine_type),e=d.filter((f,g)=>d.indexOf(f)==g);a(null,e)}})}static urlForRestaurant(a){return`./restaurant.html?id=${a.id}`}static restaurantId(a){return`${a.id}`}static imageUrlForRestaurant(a){return`/img/${a.id}-large.webp`}static mapMarkerForRestaurant(a,b){const c=new google.maps.Marker({position:a.latlng,title:a.name,url:DBHelper.urlForRestaurant(a),map:b,animation:google.maps.Animation.DROP});return c}static openReviewDatabase(){var a=idb.open('reviews-db',1,function(b){b.objectStoreNames.contains('reviews')||(console.log('Create IndexedDB reviews store'),b.createObjectStore('reviews',{keyPath:'id'}))});return a}static dbReviewStore(a,b){b.then(function(c){var d=c.transaction('reviews','readwrite'),e=d.objectStore('reviews');return e.put(a),d.complete}).then(function(){})}static dbReviewGetAll(a,b){a.then(function(c){var d=c.transaction('reviews','readonly'),e=d.objectStore('reviews');return e.getAll()}).then(function(c){b(c)})}static dbReviewDeleteAll(a){a.then(function(b){var c=b.transaction('reviews','readwrite');return c.objectStore('reviews').clear(),c.complete})}static openTempReviewDatabase(){var a=idb.open('temp-db',1,function(b){b.objectStoreNames.contains('reviews')||(console.log('Create IndexedDB temp reviews store'),b.createObjectStore('reviews',{keyPath:'temp_id',autoIncrement:!0}))});return a}static dbTempReviewStore(a,b){return b.then(function(d){var e=d.transaction('reviews','readwrite'),f=e.objectStore('reviews');return f.add(a),e.complete})}static dbTempReviewGetAll(a){return a.then(function(b){var c=b.transaction('reviews','readonly'),d=c.objectStore('reviews');return console.log('Getting cached reviews from IDB'),d.getAll()})}static dbTempReviewDelete(a,b){return a.then(function(c){var d=c.transaction('reviews','readwrite'),e=d.objectStore('reviews');e.delete(b)})}static get REVIEWS_URL(){return`http://localhost:${1337}/reviews/?restaurant_id=`}static fetchRestaurantReviewsById(a,b){let c=DBHelper.openReviewDatabase();fetch(DBHelper.REVIEWS_URL+a,{method:'get'}).then(function(d){return d.json()}).then(function(d){d.forEach(function(e){DBHelper.dbReviewStore(e,c)}),b(null,d)}).catch(function(){DBHelper.dbReviewGetAll(c,f=>{b(null,f)})})}static postData(a,b,c){return fetch(a,{method:b,headers:{'Content-Type':'application/json; charset=utf-8'},body:JSON.stringify(c)}).then(d=>{d.status;return d.json()}).catch(function(d){throw d})}static processReviews(){console.log('Processing Reviews'),DBHelper.dbTempReviewGetAll(DBHelper.openTempReviewDatabase()).then(function(a){Promise.all(a.map(function(b){DBHelper.postData(`http://localhost:1337/reviews/`,`POST`,b).then(c=>{return c.createdAt?void DBHelper.dbTempReviewDelete(DBHelper.openTempReviewDatabase(),b.temp_id):Promise.reject('something went way wrong!')}).catch(function(c){console.error(c)})})).then(function(){}).catch(function(b){console.error(b)})}).catch(function(a){console.error(a)})}}