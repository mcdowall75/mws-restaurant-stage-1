class DBHelper{static openDatabase(){var i=idb.open("restaurants-db",1,function(k){k.objectStoreNames.contains("restaurants")||(console.log("Create IndexedDB store"),k.createObjectStore("restaurants",{keyPath:"id"}))});return i}static dbStore(i,k){k.then(function(l){var m=l.transaction("restaurants","readwrite"),n=m.objectStore("restaurants");return n.add(i),m.complete}).then(function(){})}static dbUpdate(i,k){k.then(function(l){var m=l.transaction("restaurants","readwrite"),n=m.objectStore("restaurants");return n.put(i),m.complete}).then(function(){})}static dbGetAll(i,k){i.then(function(l){var m=l.transaction("restaurants","readonly"),n=m.objectStore("restaurants");return n.getAll()}).then(function(l){k(l)})}static get DATABASE_URL(){return`http://localhost:${1337}/restaurants`}static fetchRestaurants(i){let k=DBHelper.openDatabase();k.then(function(l){let m=l.transaction("restaurants","readonly"),n=m.objectStore("restaurants");return n.getAll()}).then(function(l){0==l.length?(console.log("restaurants are empty"),fetch(DBHelper.DATABASE_URL,{method:"get"}).then(function(m){return m.json()}).then(function(m){m.forEach(function(n){DBHelper.dbStore(n,k)}),i(null,m)}).catch(function(m){const n=`Request failed. Returned status of ${m}`;i(n,null)})):DBHelper.dbGetAll(k,m=>{i(null,m)})})}static fetchRestaurantById(i,k){DBHelper.fetchRestaurants((l,m)=>{if(l)k(l,null);else{const n=m.find(o=>o.id==i);n?k(null,n):k("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(i,k){DBHelper.fetchRestaurants((l,m)=>{if(l)k(l,null);else{const n=m.filter(o=>o.cuisine_type==i);k(null,n)}})}static fetchRestaurantByNeighborhood(i,k){DBHelper.fetchRestaurants((l,m)=>{if(l)k(l,null);else{const n=m.filter(o=>o.neighborhood==i);k(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(i,k,l,m){DBHelper.fetchRestaurants((n,o)=>{if(n)m(n,null);else{let p=o;"all"!=i&&(p=p.filter(q=>q.cuisine_type==i)),"all"!=k&&(p=p.filter(q=>q.neighborhood==k)),!1!=l&&(p=p.filter(q=>!0==q.is_favorite||"true"==q.is_favorite)),m(null,p)}})}static fetchRestaurantByFavourite(i){DBHelper.fetchRestaurants((k,l)=>{if(k)i(k,null);else{let m=l;m=m.filter(n=>!0==n.is_favorite),i(null,m)}})}static fetchNeighborhoods(i){DBHelper.fetchRestaurants((k,l)=>{if(k)i(k,null);else{const m=l.map((o,p)=>l[p].neighborhood),n=m.filter((o,p)=>m.indexOf(o)==p);i(null,n)}})}static fetchCuisines(i){DBHelper.fetchRestaurants((k,l)=>{if(k)i(k,null);else{const m=l.map((o,p)=>l[p].cuisine_type),n=m.filter((o,p)=>m.indexOf(o)==p);i(null,n)}})}static urlForRestaurant(i){return`./restaurant.html?id=${i.id}`}static restaurantId(i){return`${i.id}`}static imageUrlForRestaurant(i){return`/img/${i.id}-large.webp`}static mapMarkerForRestaurant(i,k){const l=new google.maps.Marker({position:i.latlng,title:i.name,url:DBHelper.urlForRestaurant(i),map:k,animation:google.maps.Animation.DROP});return l}static openReviewDatabase(){var i=idb.open("reviews-db",1,function(k){k.objectStoreNames.contains("reviews")||(console.log("Create IndexedDB reviews store"),k.createObjectStore("reviews",{keyPath:"id"}))});return i}static dbReviewStore(i,k){k.then(function(l){var m=l.transaction("reviews","readwrite"),n=m.objectStore("reviews");return n.put(i),m.complete})}static dbReviewGetAll(i,k){i.then(function(l){var m=l.transaction("reviews","readonly"),n=m.objectStore("reviews");return n.getAll()}).then(function(l){k(l)})}static dbReviewDeleteAll(i){i.then(function(k){var l=k.transaction("reviews","readwrite");return l.objectStore("reviews").clear(),l.complete})}static openTempReviewDatabase(){var i=idb.open("temp-db",1,function(k){k.objectStoreNames.contains("reviews")||(console.log("Create IndexedDB temp reviews store"),k.createObjectStore("reviews",{keyPath:"temp_id",autoIncrement:!0}))});return i}static dbTempReviewStore(i,k){return k.then(function(l){var m=l.transaction("reviews","readwrite"),n=m.objectStore("reviews");return n.add(i),m.complete})}static dbTempReviewGetAll(i){return i.then(function(k){var l=k.transaction("reviews","readonly"),m=l.objectStore("reviews");return console.log("Getting cached reviews from IDB"),m.getAll()})}static dbTempReviewDelete(i,k){return i.then(function(l){var m=l.transaction("reviews","readwrite"),n=m.objectStore("reviews");n.delete(k)})}static get REVIEWS_URL(){return`http://localhost:${1337}/reviews/?restaurant_id=`}static fetchRestaurantReviewsById(i,k){let l=DBHelper.openReviewDatabase();fetch(DBHelper.REVIEWS_URL+i,{method:"get"}).then(function(m){return m.json()}).then(function(m){m.forEach(function(n){DBHelper.dbReviewStore(n,l)}),k(null,m)}).catch(function(m){console.log("failure",m),DBHelper.dbReviewGetAll(l,(n,o)=>{if(console.log(n),console.log(o),o)k(null,o);else{console.log(i);const p=n.filter(q=>q.restaurant_id==i);console.log(p),p?k(null,p):b("Restaurant does not exist",null)}})})}static postData(i,k,l){return fetch(i,{method:k,headers:{"Content-Type":"application/json; charset=utf-8"},body:JSON.stringify(l)}).then(m=>{return m.status,m.json()}).catch(function(m){throw m})}static processReviews(){console.log("Processing Reviews"),DBHelper.dbTempReviewGetAll(DBHelper.openTempReviewDatabase()).then(function(i){Promise.all(i.map(function(k){DBHelper.postData(`http://localhost:1337/reviews/`,`POST`,k).then(l=>{return l.createdAt?void DBHelper.dbTempReviewDelete(DBHelper.openTempReviewDatabase(),k.temp_id):Promise.reject("something went way wrong!")}).catch(function(l){console.error(l)})})).then(function(){}).catch(function(k){console.error(k)})}).catch(function(i){console.error(i)})}}